functions:
  "fetch_source":
    - command: git.get_project
      params:
        directory: "stitch-ios-sdk"

  "set_github_build_status":
    - command: shell.exec
      params:
        silent: true
        script: |
          status_url=`curl -X POST -d "{}" -H "Content-Type: application/json" "${stitch_evg_hook_url}?secret=${stitch_evg_secret}&versionId=${version_id}"`
          if [ "$status_url" = "null" ]; then
            exit 0
          fi
          status_url=`sed -e 's/^"//' -e 's/"$//' <<<"$status_url"`
          state=`cat commit_state`
          curl -X POST -H "Content-Type: application/json" $status_url -d "{\"state\": \"$state\", \"target_url\": \"https://evergreen.mongodb.com/build/${build_id}\", \"context\": \"continuous-integration/evergreen-ci/${build_variant}\"}"

tasks:
  - name: github_pull_request_start
    priority: 100
    commands:
      - command: shell.exec
        params:
          script: |
            if ! [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            echo pending > commit_state
      - func: "set_github_build_status"

  - name: github_pull_request_end
    depends_on:
      - name: github_pull_request_start
      - name: run_tests
        status: "*"
        variant: linux-64
    commands:
      - command: shell.exec
        params:
          silent: true
          script: |
            if ! [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            BUILDS=( `curl -H "Auth-Username: ${evg_rest_user}" -H "Api-Key: ${evg_rest_api_key}"  https://evergreen.mongodb.org/rest/v1/versions/${version_id} | python -c "import sys, json; builds = json.load(sys.stdin)['builds']; print ' '.join(builds)"` )
            for build in "${BUILDS[@]}"
            do
              curl -H "Auth-Username: ${evg_rest_user}" -H "Api-Key: ${evg_rest_api_key}"  https://evergreen.mongodb.org/rest/v1/builds/$build | python -c "import sys, json; tasks = json.load(sys.stdin)['tasks']; sys.exit(0) if all(tasks[task]['status'] == 'success' or task == 'github_pull_request_end'  for task in tasks) else sys.exit(1)"              
              if [ $? -ne 0 ]; then
                echo "failure" > commit_state
                exit 0
              fi
            done

            echo "success" > commit_state
      - func: "set_github_build_status"

  - name: run_tests
    commands:
      - func: "fetch_source"
      - command: shell.exec
        silent: true
        params:
          script: |
            set -e
            cd stitch-ios-sdk
            git submodule update --init --recursive

            cd StitchCore
            swift test
buildvariants:
- name: macos
  display_name: MacOS
  values:
      - id: macos-1012
        display_name: "macOS 10.12"
        run_on: macos-1012
        variables:
          COMPILE_ENV: DEVELOPER_DIR=/Applications/Xcode9.2.app
  tasks:
    - name: github_pull_request_start
    - name: run_tests
    - name: github_pull_request_end
